// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;
using ValueScreener.Data;
using ValueScreener.Models.Domain;

namespace ValueScreener.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20171229180817_ChangeMarketPlace")]
    partial class ChangeMarketPlace
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ValueScreener.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("ValueScreener.Models.Domain.BalanceSheet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("FinancialStatementId");

                    b.Property<decimal>("TotalAssets");

                    b.Property<decimal>("TotalEquity");

                    b.Property<decimal>("TotalLiabilities");

                    b.HasKey("Id");

                    b.HasIndex("FinancialStatementId")
                        .IsUnique();

                    b.ToTable("BalanceSheets");
                });

            modelBuilder.Entity("ValueScreener.Models.Domain.CashFlowStatement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("ChangeInCashAndCashEquivalent");

                    b.Property<int>("FinancialStatementId");

                    b.HasKey("Id");

                    b.HasIndex("FinancialStatementId")
                        .IsUnique();

                    b.ToTable("CashFlowStatements");
                });

            modelBuilder.Entity("ValueScreener.Models.Domain.FinancialStatement", b =>
                {
                    b.Property<int>("FinancialStatementId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Frequency");

                    b.Property<DateTime>("ReleaseDate");

                    b.Property<string>("StatementType")
                        .IsRequired();

                    b.Property<int>("StockId");

                    b.Property<DateTime>("Year");

                    b.Property<int>("YearPeriod");

                    b.HasKey("FinancialStatementId");

                    b.HasIndex("StockId");

                    b.ToTable("FinancialStatements");
                });

            modelBuilder.Entity("ValueScreener.Models.Domain.IncomeStatement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("FinancialStatementId");

                    b.Property<decimal>("TotalEarnings");

                    b.HasKey("Id");

                    b.HasIndex("FinancialStatementId")
                        .IsUnique();

                    b.ToTable("IncomeStatements");
                });

            modelBuilder.Entity("ValueScreener.Models.Domain.MarketData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("LastPrice");

                    b.Property<decimal>("MarketCapitalization");

                    b.Property<int>("OutstandingShares");

                    b.Property<int>("QuotationUnit");

                    b.Property<int>("StockId");

                    b.HasKey("Id");

                    b.HasIndex("StockId")
                        .IsUnique();

                    b.ToTable("MarketDatas");
                });

            modelBuilder.Entity("ValueScreener.Models.Domain.PricingResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("EnterpriseValue");

                    b.Property<decimal>("NetCurrentAssetValue");

                    b.Property<int>("PiotroskiScore");

                    b.Property<decimal>("ReturnOnAssets");

                    b.Property<decimal>("ReturnOnEquity");

                    b.Property<decimal>("ReturnOnInvestedCapital");

                    b.Property<int>("StockId");

                    b.HasKey("Id");

                    b.HasIndex("StockId")
                        .IsUnique();

                    b.ToTable("PricingResults");
                });

            modelBuilder.Entity("ValueScreener.Models.Domain.Stock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Country");

                    b.Property<string>("Currency")
                        .IsRequired();

                    b.Property<string>("Industry");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("QuotationPlace");

                    b.Property<string>("Sector");

                    b.Property<string>("Ticker")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.ToTable("Stocks");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ValueScreener.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ValueScreener.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ValueScreener.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ValueScreener.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ValueScreener.Models.Domain.BalanceSheet", b =>
                {
                    b.HasOne("ValueScreener.Models.Domain.FinancialStatement", "FinancialStatement")
                        .WithOne("BalanceSheet")
                        .HasForeignKey("ValueScreener.Models.Domain.BalanceSheet", "FinancialStatementId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ValueScreener.Models.Domain.CashFlowStatement", b =>
                {
                    b.HasOne("ValueScreener.Models.Domain.FinancialStatement", "FinancialStatement")
                        .WithOne("CashFlowStatement")
                        .HasForeignKey("ValueScreener.Models.Domain.CashFlowStatement", "FinancialStatementId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ValueScreener.Models.Domain.FinancialStatement", b =>
                {
                    b.HasOne("ValueScreener.Models.Domain.Stock", "Stock")
                        .WithMany("FinancialStatements")
                        .HasForeignKey("StockId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ValueScreener.Models.Domain.IncomeStatement", b =>
                {
                    b.HasOne("ValueScreener.Models.Domain.FinancialStatement", "FinancialStatement")
                        .WithOne("IncomeStatement")
                        .HasForeignKey("ValueScreener.Models.Domain.IncomeStatement", "FinancialStatementId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ValueScreener.Models.Domain.MarketData", b =>
                {
                    b.HasOne("ValueScreener.Models.Domain.Stock", "Stock")
                        .WithOne("MarketData")
                        .HasForeignKey("ValueScreener.Models.Domain.MarketData", "StockId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ValueScreener.Models.Domain.PricingResult", b =>
                {
                    b.HasOne("ValueScreener.Models.Domain.Stock", "Stock")
                        .WithOne("PricingResult")
                        .HasForeignKey("ValueScreener.Models.Domain.PricingResult", "StockId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
